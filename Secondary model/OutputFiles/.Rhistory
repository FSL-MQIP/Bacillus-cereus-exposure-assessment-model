rm(list=ls())
mean(data_193_d14_HR,data_194_d14_HR,data_402_d14_HR,data_407_d14_HR,
data_413_d14_HR,data_433_d14_HR,data_457_d14_HR,data_474_d14_HR,
data_495_d14_HR,data_518_d14_HR,data_536_d14_HR,data_564_d14_HR,
data_570_d14_HR,data_638_d14_HR,data_649_d14_HR)
load("C:/Users/sujun/OneDrive/Documents/RWork/Jun's project/Dynamic temperature modeling.RData")
mean(data_193_d14_HR,data_194_d14_HR,data_402_d14_HR,data_407_d14_HR,
+      data_413_d14_HR,data_433_d14_HR,data_457_d14_HR,data_474_d14_HR,
+      data_495_d14_HR,data_518_d14_HR,data_536_d14_HR,data_564_d14_HR,
+      data_570_d14_HR,data_638_d14_HR,data_649_d14_HR)
mean(Iso_193_d14_HR,Iso_194_d14_HR,Iso_402_d14_HR,Iso_407_d14_HR,
+      Iso_413_d14_HR,Iso_433_d14_HR,Iso_457_d14_HR,Iso_474_d14_HR,
+      Iso_495_d14_HR,Iso_518_d14_HR,Iso_536_d14_HR,Iso_564_d14_HR,
+      Iso_570_d14_HR,Iso_638_d14_HR,Iso_649_d14_HR)
mean(Iso193_d14_HR,Iso194_d14_HR,Iso402_d14_HR,Iso407_d14_HR,
Iso413_d14_HR,Iso433_d14_HR,Iso457_d14_HR,Iso474_d14_HR,
Iso495_d14_HR,Iso518_d14_HR,Iso536_d14_HR,Iso564_d14_HR,
Iso570_d14_HR,Iso638_d14_HR,Iso649_d14_HR)
?mean
Iso649_d31_LR = sum(data_649_d31$conc>3)/100
Iso193_d14_HR
Iso194_d14_HR
Iso193_d14_HR <- 0.03
write.csv(data_649_d31,"data_649_d31.csv")
Iso193_d14_HR
mean(Iso193_d14_HR,Iso194_d14_HR,Iso402_d14_HR,Iso407_d14_HR,
+      Iso413_d14_HR,Iso433_d14_HR,Iso457_d14_HR,Iso474_d14_HR,
+      Iso495_d14_HR,Iso518_d14_HR,Iso536_d14_HR,Iso564_d14_HR,
+      Iso570_d14_HR,Iso638_d14_HR,Iso649_d14_HR)
mean(Iso193_d14_HR,Iso194_d14_HR,Iso402_d14_HR,Iso407_d14_HR,
Iso413_d14_HR,Iso433_d14_HR,Iso457_d14_HR,Iso474_d14_HR,
Iso495_d14_HR,Iso518_d14_HR,Iso536_d14_HR,Iso564_d14_HR,
Iso570_d14_HR,Iso638_d14_HR,Iso649_d14_HR)
data_combined <- rbind(data_193_d14,data_194_d14,data_402_d14,data_407_d14,
data_413_d14,data_433_d14,data_457_d14,data_474_d14,
data_495_d14,data_518_d14,data_536_d14,data_564_d14,
data_570_d14,data_638_d14,data_649_d14)
Iso649_d31_LR
sum(Iso193_d14_HR,Iso194_d14_HR,Iso402_d14_HR,Iso407_d14_HR,
Iso413_d14_HR,Iso433_d14_HR,Iso457_d14_HR,Iso474_d14_HR,
Iso495_d14_HR,Iso518_d14_HR,Iso536_d14_HR,Iso564_d14_HR,
Iso570_d14_HR,Iso638_d14_HR,Iso649_d14_HR)
1.51/15
sd(Iso193_d14_HR,Iso194_d14_HR,Iso402_d14_HR,Iso407_d14_HR,
Iso413_d14_HR,Iso433_d14_HR,Iso457_d14_HR,Iso474_d14_HR,
Iso495_d14_HR,Iso518_d14_HR,Iso536_d14_HR,Iso564_d14_HR,
Iso570_d14_HR,Iso638_d14_HR,Iso649_d14_HR)
?sd
sd(Iso193_d14_HR,Iso194_d14_HR,Iso402_d14_HR,Iso407_d14_HR,
Iso413_d14_HR,Iso433_d14_HR,Iso457_d14_HR,Iso474_d14_HR,
Iso495_d14_HR,Iso518_d14_HR,Iso536_d14_HR,Iso564_d14_HR,
Iso570_d14_HR,Iso638_d14_HR,Iso649_d14_HR)
mean(3,10,3,5,0,3,3,4,6,5,4,30,59,12,4)
?mean
x<-c(3,10,3,5,0,3,3,4,6,5,4,30,59,12,4)
mean(x)
sd(x)
rm(list=ls())
rm(list=ls())
temps_F <- rep(runif(n_sim,min=3.5,max=4.5),each=n_units)
rm(list=ls())
load("~/GitHub/Bacillus-cereus-exposure-assessment-model/fit_square_root_model.RData")
Tmin_407 = 4.419192
rm(list=ls())
load("C:/Users/sujun/OneDrive/Documents/RWork/Jun's project/Dynamic temperature modeling.RData")
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
?read.csv
knitr::opts_chunk$set(echo = TRUE)
plot(y,m)
rm(list=ls())
snow_data <-
read.csv("https://raw.githubusercontent.com/ysamwang/btry6020_sp22/main/lectureData/snow_data.csv")
names(snow_data)
m = lm(snow_data$snow ~ snow_data$nino)
m$coefficients
x = snow_data$nino
y = snow_data$snow
plot(x,y)
abline(m)
plot(y,m)
m$fitted.values
snow_data$snow
x = snow_data$nino
y = snow_data$snow
plot(x,y)
abline(m)
plot(y,m$fitted.values)
x = snow_data$nino
y = snow_data$snow
plot(x,y)
abline(m)   # plot the linear regression line
plot(m$fitted.values,y)  # plot the
rm(list=ls())
rm(list=ls())
rm(list=ls())
library(shiny)
runExample("01_hello")
runExample("01_hello")
runExample("01_hello")
runExample("01_hello")
rm(list=ls())
library(shiny); runApp('C:/Users/sujun/OneDrive/Documents/RWork/PPC gram negative bacteria in fluid milk/App/App_PPC.R')
library(shiny); runApp('C:/Users/sujun/OneDrive/Documents/RWork/PPC gram negative bacteria in fluid milk/App/App_PPC.R')
rm(list=ls())
library(shiny); runApp('GitHub/BRisk/BRisk_app.R')
runApp('GitHub/BRisk/BRisk_app.R')
library(shiny)
library(readr)
library(stringr)
library(fitdistrplus)
library(mc2d)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel(HTML("BRisk")),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("file1","Choose a BTyper final results file to analyze",
multiple=FALSE,accept=c("_final_results.txt")),
helpText("Final results files are text files that BTyper
creates. They have the extension '_final_results.txt'."),
selectInput("foodmatrix",
label="Select a food matrix",
choices=c(
"Select a food matrix"=0,
"Milk, pasteurized fluid"=1,
"Rice, cooked white"=2,
"Soup, vegetable"=3),selected=0),
fileInput("file1m","Upload a bacterial count data file",
multiple=FALSE,accept=c(".txt")),
helpText("A count data file is a text (.txt) file that contains B. cereus group isolate counts in log(CFU/g) or log(CFU/mL),
with one count per line.")),
# Show a plot of the generated distribution
mainPanel(
plotOutput("hist"),
htmlOutput("riskText"),
tableOutput("riskTable")
)
)
)
library(shiny)
library(readr)
library(stringr)
library(fitdistrplus)
library(mc2d)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel(HTML("BRisk")),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
fileInput("file1","Choose a BTyper final results file to analyze",
multiple=FALSE,accept=c("_final_results.txt")),
helpText("Final results files are text files that BTyper
creates. They have the extension '_final_results.txt'."),
selectInput("foodmatrix",
label="Select a food matrix",
choices=c(
"Select a food matrix"=0,
"Milk, pasteurized fluid"=1,
"Rice, cooked white"=2,
"Soup, vegetable"=3),selected=0),
fileInput("file1m","Upload a bacterial count data file",
multiple=FALSE,accept=c(".txt")),
helpText("A count data file is a text (.txt) file that contains B. cereus group isolate counts in log(CFU/g) or log(CFU/mL),
with one count per line.")),
# Show a plot of the generated distribution
mainPanel(
plotOutput("hist"),
htmlOutput("riskText"),
tableOutput("riskTable")
)
)
)
server <- function(input, output) {
get.infile<-function(){
infile <- input$file1
if (is.null(infile)){
return(NULL)}
else{
rfile<-read_file(infile$datapath)}
lines<-strsplit(rfile,"\n")
pgenes<-lapply(lines,function(x) which(x%in%"panC Clade Name\tClosest Strain\tPercent (%) Identity\tPercent (%) Coverage"))[[1]]
pts<-c()
for (i in 1:length(lines)){
pgroup<-strsplit(lines[[i]][pgenes[[i]][1]+1],split="\t")[[1]][1:2]
punit<-paste(pgroup[1],pgroup[2],sep="_")
if (!grepl("Predicted",punit)){
pts<-append(pts,punit)}
}
pts<-gsub("_.*","\n",pts)
pts<-gsub("\\*","",pts)
clade<-pts[which(as.character(pts)!="NA\nNA")]
clade<-gsub("[\r\n]", "", clade)
anthrax<-c("\tcya\\|","\tlef\\|","\tpagA\\|")
emetic<-c("\tcesA\\|","\tcesB\\|","\tcesC\\|","\tcesD\\|")
dia1<-c("\tcytK1\\|","\tcytK2\\|")
dia2<-c("\thblA\\|","\thblB\\|","\thblC\\|","\thblD\\|")
vgenes<-rownames(sapply(lines,function(x) which(vapply(x,function(r) grepl("\\|",r)&&!(grepl("rpoB\\|",r))&&!(grepl("\\(",r)),FUN.VALUE = 1)==1)))
agenes<-vgenes[grep(paste(anthrax,collapse="|"), vgenes)]
egenes<-vgenes[grep(paste(emetic,collapse="|"), vgenes)]
d1genes<-vgenes[grep(paste(dia1,collapse="|"),vgenes)]
d2genes<-vgenes[grep(paste(dia2,collapse="|"),vgenes)]
print(clade)
if(length(agenes)>0){
disease<-'<p style="color:darkred;">high-risk isolate (anthrax)</p>'}
else if(length(egenes)==4 && clade=="clade3"){
disease<-'<p style="color:darkred;">high-risk isolate (emetic disease)</p>'}
else if(length(d1genes)>1||length(d2genes)==4){
disease<-'<p style="color:darkred;">high-risk isolate (diarrheal disease)</p>'}
else{
disease<-'<p style="color:mediumseagreen;">low-risk isolate (no known disease outcome)</p>'}
return(list(clade,disease))
}#end get.infile
get.counts<-function(){
infile<-input$file1m
if (is.null(infile)){
return(NULL)}
if (is.null(input$file1)){
return(NULL)}
if (input$foodmatrix==0){
return(NULL)}
else{
mtable<-read.table(infile$datapath,header=FALSE,sep = "\t")
validate(need(ncol(mtable)==1,"Your count data file needs to have exactly 1 column with B. cereus group counts in log(CFU/g) or log(CFU/mL)."))
# fit lognormal dist'n per USDA-FSIS 2003 Listeria in deli meats, page 49: https://www.fsis.usda.gov/OPPDE/rdad/FRPubs/97-013F/ListeriaReport.pdf
if(length(mtable$V1)>1){
dist0<-fitdist(mtable$V1,distr = "lnorm",method="mle")
sample0<-rlnorm(n = 1,meanlog = dist0$estimate[1],sdlog = dist0$estimate[2])}
else{
sample0<-rlnorm(n = 1,meanlog = mtable$V1,sdlog = 1)}
return(sample0)
}
}# end get.counts
get.growth<-function(clade){
# using t-distribution for parameters: A Toolbox for Nonlinear Regression in R: The Package nlstools (page 8)
if (input$foodmatrix==0){
return(NULL)}
else{
food<-input$foodmatrix}
if(clade=="clade3"&&food==1){
mumax<-1.161991
log10nmax<-8.62642
}#clade3
else if(clade=="clade3"&&food==2){
mumax<-2
log10nmax<-9
}#clade3
else if(clade=="clade3"&&food==3){
mumax<-0.5
log10nmax<-6
}#clade3
# clade4
else if(clade=="clade4"&&food==1){
mumax<-1.5
log10nmax<-5
}#clade4
else if(clade=="clade4"&&food==2){
mumax<-1.9
log10nmax<-9.5
}#clade4
else if(clade=="clade4"&&food==3){
mumax<-0.3
log10nmax<-7
}#clade4
######## only adding this for demo version
else{
mumax<-0.01
log10nmax<-1}
return(list(mumax,log10nmax))
}#end get.growth
# log10N
log10N_func = function(t,mumax,LOG10N0,LOG10Nmax){
ans <- LOG10N0 + (t <= ((LOG10Nmax - LOG10N0) * log(10)/mumax)) *     mumax * t/log(10) + (t > ((LOG10Nmax - LOG10N0) * log(10)/mumax)) *     (LOG10Nmax - LOG10N0)
return(ans)
}
output$hist<-renderPlot({
if(input$foodmatrix==0){
return(NULL)}
if(is.null(input$file1)){
return(NULL)}
if(is.null(input$file1m)){
return(NULL) }
virulence<-get.infile()
cfuvec<-c()
for (i in 1:100){
counts<-get.counts()
print("counts")
print(counts)
mumax<-get.growth(virulence[[1]])[[1]]
log10nmax<-get.growth(virulence[[1]])[[2]]
if(input$foodmatrix==1){
# usda table III-12: https://www.fda.gov/downloads/Food/FoodScienceResearch/UCM197330.pdf
retailtemp<-runif(1,1,5)
retailstorage<-runif(1,1,3)
EGRratio<-(5.18/(retailtemp+1.18))^2
mumaxNEW<-mumax/EGRratio
logCFU1<-log10N_func(t = retailstorage,mumax = mumaxNEW,LOG10N0 = counts,LOG10Nmax = log10nmax)
# USDA table III-7: https://www.fda.gov/downloads/Food/FoodScienceResearch/UCM197330.pdf
bin1<-runif(n = 1,min = 0,max = 32)
bin2<-runif(n = 1,min = 33,max = 35)
bin3<-runif(n = 1,min = 36,max = 38)
bin4<-runif(n = 1,min = 39,max = 41)
bin5<-runif(n = 1,min = 42,max = 44)
bin6<-runif(n = 1,min = 45,max = 47)
bin7<-runif(n = 1,min = 48,max = 50)
bin8<-runif(n = 1,min = 51,max = 53)
bin9<-runif(n = 1,min = 54,max = 56)
bin10<-runif(n = 1,min = 57,max = 59)
bin11<-runif(n = 1,min = 60,max = 63)
mybin<-sample(x = c(paste("bin",c(1:11),sep="")),size = 1,prob = c(0.09,0.1,0.25,0.29,0.18,0.05,0.03,0.004,0.005,0.004,0.001),replace = TRUE)
ftemp<-eval(parse(text=mybin))
consumertemp<-(ftemp-32)/1.8
# USDA table III-5: https://www.fda.gov/downloads/Food/FoodScienceResearch/UCM197330.pdf
consumerstorage<-rpert(n = 1,min = 0.5,mode = c(3,5),max = c(10,15))
EGRratio2<-(5.18/(consumertemp+1.18))^2
mumaxNEW2<-mumax/EGRratio2
logCFU2<-log10N_func(t = consumerstorage,mumax = mumaxNEW2,LOG10N0 = logCFU1,LOG10Nmax = log10nmax)
print("logCFU2")
print(logCFU2)
# USDA table III-3: https://www.fda.gov/downloads/Food/FoodScienceResearch/UCM197330.pdf
serving.size<-sample(x = c(rep(x = 244,50),rep(245,25),rep(488,20),rep(732,5)),size = 1,replace = TRUE)
print("serving size")
print(serving.size)}
else if (input$foodmatrix==2 ){
# "expert" opinion: min 15.555
ftemp<-rpert(n = 1,min = 60,mode = c(135,140),max = 176)
consumertemp<-(ftemp-32)/1.8
EGRratio<-(136.18/(consumertemp+1.18))^2
mumaxNEW<-mumax/EGRratio
consumerstorage<-rpert(n = 1,min = 0,mode = c(0.000694444,0.1666666),max = 1)
logCFU2<-log10N_func(t = consumerstorage,mumax = mumaxNEW,LOG10N0 = counts,LOG10Nmax = log10nmax)
# "expert" opinion: 1/8 c min, 1/4-2 c mode, 4 c max
serving.size<-rpert(n = 1,min = 30,mode = c(65,500),max = 1000)}
else if (input$foodmatrix==3){
ftemp<-rpert(n = 1,min = 90,mode = c(135,140),max = 212)
consumertemp<-(ftemp-32)/1.8
EGRratio<-(136.18/(consumertemp+1.18))^2
mumaxNEW<-mumax/EGRratio
consumerstorage<-rpert(n = 1,min = 0,mode = c(0.000694444,0.1666666),max = 1)
logCFU2<-log10N_func(t = consumerstorage,mumax = mumaxNEW,LOG10N0 = counts,LOG10Nmax = log10nmax)
# "expert" opinion: 1/8 c min, 1/4 c-4 c, max=1 gallon
serving.size<-rpert(n = 1,min = 29,mode = c(59,946.3),max = 3785.41)}
realCFU<-10^logCFU2
CFUsim<-realCFU*serving.size
cfuvec<-c(cfuvec,CFUsim)
}# end 1 simulation
#return(virulence[[2]])
cfu.df<-data.frame(cfuvec)
cfu.df$color<-ifelse(test = cfu.df$cfuvec>=100000,yes = "High",no =
ifelse(cfu.df$cfuvec>=100,yes = "Medium",no = "Low"))
finalhist<-ggplot(data = cfu.df,aes(cfuvec))
finalhist<-finalhist+
geom_histogram(data = cfu.df,aes(fill=color),binwidth = 0.1)+
scale_fill_manual("Risk",values = c("High"="red3","Medium"="darkorange1","Low"="springgreen3"))+
#geom_histogram(data=subset(cfu.df,color=="High"), fill="red3") +
#geom_histogram(data=subset(cfu.df,color=="Medium"), fill="darkorange1") +
#geom_histogram(data=subset(cfu.df,color=="Low"), fill="springgreen3") +
scale_x_log10()+
scale_y_continuous()+
xlab(label = "Colony Forming Units (CFU)")+
ylab(label = "Servings")+
ggtitle(label = "Histogram of Colony Forming Units (CFU) per Serving")
histtable<-ggplot_build(finalhist)$data
print(histtable)
return(finalhist)} #end hist
)
output$riskText<-renderUI({
if(is.null(input$file1)){
return(NULL)}
else{
infile<-get.infile()
clade<-infile[[1]]
disease<-infile[[2]]
finalstring<-HTML(paste("<h2> Your isolate is a <b>",disease,"</b></h2>",sep = ""))
return(finalstring)}
})# end riskText
runApp('GitHub/BRisk/BRisk_app.R')
runApp('GitHub/BRisk/BRisk_app.R')
rm(list=ls())
rm(list=ls())
packageVersion("biogrowth")
rm(list=ls())
setwd("C:/Users/sujun/Documents/GitHub/BRisk")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::create("biogrowth_new")
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::create("biogrowth_new")
install.packages("cli", version = "3.4.0")
install.packages("cli", version = "3.4.0")
install.packages("cli", version = "3.4.0")
install.packages("cli", version = "3.4.0")
install.packages("cli", version = "3.4.0")
install.packages("cli", version = "3.4.0")
devtools::create("biogrowth_new")
detach("package:cli",unload = TRUE)
library(cli)
remove.packages("cli")
install.packages("cli", version = "3.4.0")
shiny::runApp()
read.csv("sec_model.new.csv")
setwd("C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model/Secondary model/OutputFiles")
read.csv("sec_model.new.csv")
read.csv("sec_model_new.csv")
data = read.csv("sec_model_new.csv")
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# load packages
library(tibble)
library(dplyr)
library(tidyr)
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# load utility functions
source("Exposure assessment model/UtilityFunctions_dynamic_growth.R")
data_Q0 = read.csv("Exposure assessment model/InputFiles/Q0_h0_summary.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("I","II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
simulation_input <- data.frame(isolate = data_Q0$isolate,
Q0 = data_Q0$Q0,
Nmax = data_Nmax$average_Nmax,
b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,
Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
# create a tibble with environmental conditions over time (3dC)
env_cond_time <- c(0:90)
env_cond_temp <- 3
# group the data by isolate name
simulation_input_groups <- simulation_input %>%
group_by(isolate)
# run simulation (3dC)
count_d90_by_isolate <- simulation_input_groups %>%
nest() %>%
mutate(
count_d90 = map(data, ~{
my_primary <- list(mu_opt = .$mu_opt, Nmax = .$Nmax, N0 = 1e2, Q0 = .$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = .$Tmin, b = .$b, clade = .$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, 91)),
my_primary,
my_secondary
)
sim <- growth$simulation
tail(sim$logN, 1)
})
) %>%
select(isolate, count_d90)
count_d90_by_isolate <- as.data.frame(count_d90_by_isolate)
simulation_Tmin_result = do.call(rbind,count_d90_by_isolate)
write.csv(simulation_Tmin_result,"Exposure assessment model/OutputFiles/simulation_Tmin_result.csv")
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:14), c(0:21), c(0:35), c(0:60), c(0:90))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
# loop over each isolate
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# loop over each env_cond_time vector
for (i in seq_along(env_cond_times)) {
env_cond_time <- env_cond_times[[i]]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, length(env_cond_time))),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate and env_cond_time combination
final_counts[[paste(isolate_name, "_", i, sep = "")]] <- final_count
}
}
# create a data frame of isolate names, final counts and days
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
days = rep(c(14,21,35,60,90),16)
count_by_isolate$days = days
write.csv(count_by_isolate,"Exposure assessment model/OutputFiles/simulation_result.csv")
