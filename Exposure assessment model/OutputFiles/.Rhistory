dunn.test(dat_22$mumax, dat_22$Group, method = "bonferroni")
library(ggplot2)
library(gridExtra)
Result = read.csv("Result.csv")
setwd("C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model/Exposure assessment model/OutputFiles")
Result = read.csv("Result.csv")
ggplot(Result, aes(x = as.factor(isolate), y = percent_over_5, fill = factor(day))) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(Clade) +
labs(x = "Isolate name", y = "Percent milk containers > 5 log (%)") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("Day 14", "Day 21", "Day 35"),
name = "Consumer Storage Day") +
ylim(0,15)
ggplot(Result, aes(x = as.factor(isolate), y = percent_over_5, fill = factor(day))) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(vars(Clade)) +
labs(x = "Isolate name", y = "Percent milk containers > 5 log (%)") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("Day 14", "Day 21", "Day 35"),
name = "Consumer Storage Day") +
ylim(0,15)
ggplot(Result, aes(x = as.factor(isolate), y = percent_over_5, fill = factor(day))) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(vars(Clade), scales = "free") +
labs(x = "Isolate name", y = "Percent milk containers > 5 log (%)") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("Day 14", "Day 21", "Day 35"),
name = "Consumer Storage Day") +
ylim(0,15)
ggplot(Result, aes(x = as.factor(isolate), y = percent_over_5, fill = factor(day))) +
geom_bar(stat = "identity", position = "dodge", width = 0.5) +
facet_wrap(vars(Clade), scales = "free") +
labs(x = "Isolate name", y = "Percent milk containers > 5 log (%)") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("Day 14", "Day 21", "Day 35"),
name = "Consumer Storage Day") +
ylim(0,15)
ggplot(Result, aes(x = as.factor(isolate), y = percent_over_5, fill = factor(day))) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(vars(Clade), scales = "free") +
labs(x = "Isolate name", y = "Percent milk containers > 5 log (%)") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("Day 14", "Day 21", "Day 35"),
name = "Consumer Storage Day") +
ylim(0,15)
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# Import data set
data_22dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_16dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_16dC_new.csv")
data_16dC$temp <- rep(16,4)
data_10dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
# Generate Nmax table
Nmax_table <- rbind(data_22dC,data_16dC,data_10dC)
Nmax_table <- Nmax_table[Nmax_table$isolate != 135, ]
Nmax_table <- Nmax_table[,c("isolate","rep","LOG10Nmax","temp")]
colnames(Nmax_table) <- c("isolate", "rep", "LOG10Nmax","temp")
# calculate average Nmax by isolate
avg_Nmax_by_isolate <- aggregate(LOG10Nmax ~ isolate, data = Nmax_table, mean)
colnames(avg_Nmax_by_isolate) <- c("isolate", "average_LOG10Nmax")
avg_Nmax_by_isolate$average_Nmax = 10^avg_Nmax_by_isolate$average_LOG10Nmax
avg_Nmax_by_isolate
View(avg_Nmax_by_isolate)
# minimum Nmax by isolate
min_Nmax_by_isolate <- aggregate(LOG10Nmax ~ isolate, data = Nmax_table, min)
min_Nmax_by_isolate
min_Nmax_by_isolate
View(Nmax_table)
avg_Nmax_by_isolate$min_Nmax = 10^min_Nmax_by_isolate$LOG10Nmax
View(avg_Nmax_by_isolate)
# maximum Nmax by isolate
max_Nmax_by_isolate <- aggregate(LOG10Nmax ~ isolate, data = Nmax_table, max)
max_Nmax_by_isolate
max_Nmax_by_isolate
avg_Nmax_by_isolate$max_Nmax = 10^max_Nmax_by_isolate$LOG10Nmax
# export the data to a CSV file
write.csv(avg_Nmax_by_isolate, "Calculate Nmax and Q0/OutputFiles/Nmax_new.csv", row.names = FALSE)
rm(list=ls())
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# load packages
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(dplyr)
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# load utility functions
source("Exposure assessment model/UtilityFunctions_dynamic_growth.R")
## Set up dataframe for modeling 100 units of HTST milk
n_sim = 100
data = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Scenario 1 - product delivery delay, w/o temperature abuse
# data$t_T <- rep(rtri(n_sim,min=1+3,max=10+3,mode=5+3))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
# Scenario 2 - temperature abuse during retail - home transportation
# data$T_T2 <- rep(rtruncnorm(n_sim,a=0+25,b=10+25,mean=8.5+25,sd=1.0))
# mean (data$T_T2)
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
# Scenario 3 - home storage temperature abuse
# temps <- rep(NA, n_sim)
# for (i in 1:n_sim){
# number <- rlaplace(1,m=4.06+1,s=2.31)
# while (number > 15+1 | number < -1+1) {
# number <- rlaplace(1,m=4.06+1,s=2.31) #truncated laplace distribution
# }
# temps[i] <- number
# }
# mean(temps)
# Scenario 4 - increase variability in home storage temperature
# temps <- rep(NA, n_sim)
# for (i in 1:n_sim){
# number <- rlaplace(1,m=4.06,s=2.31+1)
# while (number > 15 | number < -1) {
# number <- rlaplace(1,m=4.06,s=2.31+1) #truncated laplace distribution
# }
# temps1[i] <- number
# }
data$T_H <- temps
## (b) Define t_H as 14, 21, 35 days for all units
data$t_H <- rep(35, each = n_sim)
#data$t_H <- rep(21, each = n_sim)
#data$t_H <- rep(14, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
# Import data set
data_Q0 = read.csv("Exposure assessment model/InputFiles/Q0_h0_summary.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("I","II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
# Generate N0 from a Poisson distribution
set.seed(42)
N0 = rpois(n = n_sim, lambda = 1e2*1900)
N0 = N0/1900
data_Nmax$average_Nmax
View(data_Nmax)
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# load packages
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(dplyr)
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# load utility functions
source("Exposure assessment model/UtilityFunctions_dynamic_growth.R")
## Set up dataframe for modeling 100 units of HTST milk
n_sim = 100
data = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Scenario 1 - product delivery delay, w/o temperature abuse
# data$t_T <- rep(rtri(n_sim,min=1+3,max=10+3,mode=5+3))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
# Scenario 2 - temperature abuse during retail - home transportation
# data$T_T2 <- rep(rtruncnorm(n_sim,a=0+25,b=10+25,mean=8.5+25,sd=1.0))
# mean (data$T_T2)
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
# Scenario 3 - home storage temperature abuse
# temps <- rep(NA, n_sim)
# for (i in 1:n_sim){
# number <- rlaplace(1,m=4.06+1,s=2.31)
# while (number > 15+1 | number < -1+1) {
# number <- rlaplace(1,m=4.06+1,s=2.31) #truncated laplace distribution
# }
# temps[i] <- number
# }
# mean(temps)
# Scenario 4 - increase variability in home storage temperature
# temps <- rep(NA, n_sim)
# for (i in 1:n_sim){
# number <- rlaplace(1,m=4.06,s=2.31+1)
# while (number > 15 | number < -1) {
# number <- rlaplace(1,m=4.06,s=2.31+1) #truncated laplace distribution
# }
# temps1[i] <- number
# }
data$T_H <- temps
## (b) Define t_H as 14, 21, 35 days for all units
data$t_H <- rep(35, each = n_sim)
#data$t_H <- rep(21, each = n_sim)
#data$t_H <- rep(14, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
data_Q0 = read.csv("Exposure assessment model/InputFiles/Q0_h0_summary.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("I","II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
set.seed(42)
N0 = rpois(n = n_sim, lambda = 1e2*1900)
N0 = N0/1900
View(data_Nmax)
View(data_Nmax)
# Input Nmax_min
simulation_input <- data.frame(isolate = data_Q0$isolate, Q0 = data_Q0$Q0,
Nmax = data_Nmax$min_Nmax, b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
final_conc <- simulation_input %>%
rowwise() %>%
mutate(final_conc_isolate = list(lapply(1:n_sim, function(j) {
my_primary <- list(mu_opt = mu_opt, Nmax = Nmax, N0 = N0[j], Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = Tmin, b = b, clade = Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = env_cond_time[j,],
env_conditions = tibble(time = env_cond_time[j,],
temperature = env_cond_temp[j,]),
my_primary,
my_secondary)
sim <- growth$simulation
return(tail(sim$logN, 1))
}))) %>%
pull(final_conc_isolate)
# Convert the list of 16 elements into a matrix
matrix <- t(sapply(final_conc, function(x) sapply(x, tail, n=1)))
# Calculate the percentage over 5 and 3 log for each row (element) in the matrix
percent_over_5 <- rowMeans(matrix > 5) * 100
percent_over_5
simulation_input <- data.frame(isolate = data_Q0$isolate, Q0 = data_Q0$Q0,
Nmax = data_Nmax$max_Nmax, b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,Clade)
data_Nmax$max_Nmax
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
# Run simulation
final_conc <- simulation_input %>%
rowwise() %>%
mutate(final_conc_isolate = list(lapply(1:n_sim, function(j) {
my_primary <- list(mu_opt = mu_opt, Nmax = Nmax, N0 = N0[j], Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = Tmin, b = b, clade = Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = env_cond_time[j,],
env_conditions = tibble(time = env_cond_time[j,],
temperature = env_cond_temp[j,]),
my_primary,
my_secondary)
sim <- growth$simulation
return(tail(sim$logN, 1))
}))) %>%
pull(final_conc_isolate)
# Convert the list of 16 elements into a matrix
matrix <- t(sapply(final_conc, function(x) sapply(x, tail, n=1)))
# Calculate the percentage over 5 and 3 log for each row (element) in the matrix
percent_over_5 <- rowMeans(matrix > 5) * 100
percent_over_5
# Input Nmax_min
simulation_input <- data.frame(isolate = data_Q0$isolate, Q0 = data_Q0$Q0,
Nmax = data_Nmax$min_Nmax, b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
# Run simulation
final_conc <- simulation_input %>%
rowwise() %>%
mutate(final_conc_isolate = list(lapply(1:n_sim, function(j) {
my_primary <- list(mu_opt = mu_opt, Nmax = Nmax, N0 = N0[j], Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = Tmin, b = b, clade = Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = env_cond_time[j,],
env_conditions = tibble(time = env_cond_time[j,],
temperature = env_cond_temp[j,]),
my_primary,
my_secondary)
sim <- growth$simulation
return(tail(sim$logN, 1))
}))) %>%
pull(final_conc_isolate)
# Convert the list of 16 elements into a matrix
matrix <- t(sapply(final_conc, function(x) sapply(x, tail, n=1)))
# Calculate the percentage over 5 and 3 log for each row (element) in the matrix
percent_over_5 <- rowMeans(matrix > 5) * 100
percent_over_5
simulation_input
View(simulation_input)
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# load packages
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(dplyr)
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# load utility functions
source("Exposure assessment model/UtilityFunctions_dynamic_growth.R")
## Set up dataframe for modeling 100 units of HTST milk
n_sim = 100
data = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Scenario 1 - product delivery delay, w/o temperature abuse
# data$t_T <- rep(rtri(n_sim,min=1+3,max=10+3,mode=5+3))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
# Scenario 2 - temperature abuse during retail - home transportation
# data$T_T2 <- rep(rtruncnorm(n_sim,a=0+25,b=10+25,mean=8.5+25,sd=1.0))
# mean (data$T_T2)
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
# Scenario 3 - home storage temperature abuse
# temps <- rep(NA, n_sim)
# for (i in 1:n_sim){
# number <- rlaplace(1,m=4.06+1,s=2.31)
# while (number > 15+1 | number < -1+1) {
# number <- rlaplace(1,m=4.06+1,s=2.31) #truncated laplace distribution
# }
# temps[i] <- number
# }
# mean(temps)
# Scenario 4 - increase variability in home storage temperature
# temps <- rep(NA, n_sim)
# for (i in 1:n_sim){
# number <- rlaplace(1,m=4.06,s=2.31+1)
# while (number > 15 | number < -1) {
# number <- rlaplace(1,m=4.06,s=2.31+1) #truncated laplace distribution
# }
# temps1[i] <- number
# }
data$T_H <- temps
## (b) Define t_H as 14, 21, 35 days for all units
data$t_H <- rep(35, each = n_sim)
#data$t_H <- rep(21, each = n_sim)
#data$t_H <- rep(14, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
data_Q0 = read.csv("Exposure assessment model/InputFiles/Q0_h0_summary.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("I","II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
# Generate N0 from a Poisson distribution
set.seed(42)
N0 = rpois(n = n_sim, lambda = 1e2*1900)
N0 = N0/1900
simulation_input <- data.frame(isolate = data_Q0$isolate, Q0 = data_Q0$Q0,
Nmax = data_Nmax$min_Nmax, b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
# Run simulation
final_conc <- simulation_input %>%
rowwise() %>%
mutate(final_conc_isolate = list(lapply(1:n_sim, function(j) {
my_primary <- list(mu_opt = mu_opt, Nmax = Nmax, N0 = N0[j], Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = Tmin, b = b, clade = Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = env_cond_time[j,],
env_conditions = tibble(time = env_cond_time[j,],
temperature = env_cond_temp[j,]),
my_primary,
my_secondary)
sim <- growth$simulation
return(tail(sim$logN, 1))
}))) %>%
pull(final_conc_isolate)
# Convert the list of 16 elements into a matrix
matrix <- t(sapply(final_conc, function(x) sapply(x, tail, n=1)))
# Calculate the percentage over 5 and 3 log for each row (element) in the matrix
percent_over_5 <- rowMeans(matrix > 5) * 100
percent_over_5
