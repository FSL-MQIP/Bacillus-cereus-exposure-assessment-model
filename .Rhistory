# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- unique_isolates$Isolate[i]
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$T)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
library(dplyr)
# subset data by isolates
unique_isolates <- unique(data[c("Isolate")])
# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- unique_isolates$Isolate[i]
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$temp)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
library(dplyr)
# subset data by isolates
unique_isolates <- unique(data[c("Isolate")])
# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- as.character(unique_isolates$Isolate[i])
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$temp)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
# join the b and Tmin data frames to the unique_isolates data frame
results <- unique_isolates %>%
left_join(b) %>%
left_join(Tmin)
library(dplyr)
# subset data by isolates
unique_isolates <- unique(data[c("Isolate")])
# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- as.character(unique_isolates$Isolate[i])
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$temp)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
# join the b and Tmin data frames to the unique_isolates data frame
results <- unique_isolates %>%
mutate(Isolate = as.character(Isolate))
left_join(b) %>%
left_join(Tmin)
library(dplyr)
# subset data by isolates
unique_isolates <- unique(data[c("Isolate")])
# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- as.character(unique_isolates$Isolate[i])
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$temp)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
rm(list=ls())
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
# join the b and Tmin data frames to the unique_isolates data frame
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# import 22dC and 10dC growth parameters
data_22dC <- read.csv("Secondary model/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_22dC_mumax <- data_22dC[,c("isolate","temp","mumax")]
data_10dC <- read.csv("Secondary model/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
data_10dC_mumax <- data_10dC[,c("isolate","temp","mumax")]
# incorporate growth/no growth data
isolate <- data_22dC$isolate[!(data_22dC$isolate == 125 | data_22dC$isolate == 135)]
temp <- rep(8,30)
temp[14]<-6
temp[29]<-6
mumax <- rep(0,30)
df <- data.frame(isolate = isolate, temp = temp, mumax = mumax)
# combine data
data <- rbind(data_22dC_mumax,data_10dC_mumax,df)
# covert unit and calculate square root
data$mumax_2 = data$mumax/log(10)*24
data$sqrt_mumax_2 = sqrt(data$mumax_2)
# change column names
colnames(data) <- c("Isolate","temp","mumax_ln_h","mumax_log10_day","sqrt_mumax_log10_day")
# save file
write.csv(data,"Secondary model/OutputFiles/mumax_new.csv")
library(dplyr)
# subset data by isolates
unique_isolates <- unique(data[c("Isolate")])
# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- as.character(unique_isolates$Isolate[i])
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$temp)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
# join the b and Tmin data frames to the unique_isolates data frame
results <- unique_isolates %>%
mutate(Isolate = as.character(Isolate)) %>%
left_join(b) %>%
left_join(Tmin)
# save results to a CSV file
write.csv(results, file = "results.csv", row.names = FALSE)
library(dplyr)
# subset data by isolates
unique_isolates <- unique(data[c("Isolate")])
# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- as.character(unique_isolates$Isolate[i])
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$temp)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
# join the b and Tmin data frames to the unique_isolates data frame
results <- unique_isolates %>%
mutate(Isolate = as.character(Isolate)) %>%
left_join(b) %>%
left_join(Tmin)
# save results to a CSV file
write.csv(results, file = "Secondary model/OutputFiles/sec_model_new.csv", row.names = FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# import 22dC and 10dC growth parameters
data_22dC <- read.csv("Secondary model/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_22dC_mumax <- data_22dC[,c("isolate","temp","mumax")]
data_10dC <- read.csv("Secondary model/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
data_10dC_mumax <- data_10dC[,c("isolate","temp","mumax")]
# incorporate growth/no growth data
isolate <- data_22dC$isolate[!(data_22dC$isolate == 125 | data_22dC$isolate == 135)]
temp <- rep(8,30)
temp[14]<-6
temp[29]<-6
mumax <- rep(0,30)
df <- data.frame(isolate = isolate, temp = temp, mumax = mumax)
# combine data
data <- rbind(data_22dC_mumax,data_10dC_mumax,df)
# covert unit and calculate square root
data$mumax_2 = data$mumax/log(10)*24
data$sqrt_mumax_2 = sqrt(data$mumax_2)
# change column names
colnames(data) <- c("Isolate","temp","mumax_ln_h","mumax_log10_day","sqrt_mumax_log10_day")
# save file
write.csv(data,"Secondary model/OutputFiles/mumax_new.csv")
library(dplyr)
# subset data by isolates
unique_isolates <- unique(data[c("Isolate")])
# initialize data frames to store the fits
b <- data.frame(Isolate = character(), Slope = numeric(), stringsAsFactors = FALSE)
Tmin <- data.frame(Isolate = character(), Tmin = numeric(), stringsAsFactors = FALSE)
# loop over each isolate and rep combination to fit secondary model
for (i in 1:nrow(unique_isolates)) {
isolate <- as.character(unique_isolates$Isolate[i])
isolate_data <- subset(data, Isolate == isolate) # subset the data for the current isolate
sqrt_mumax <- isolate_data$sqrt_mumax_log10_day
fit <- lm(sqrt_mumax ~ isolate_data$temp)
slope <- coef(fit)[2]
tmin <- -coef(fit)[1]/coef(fit)[2]
b <- bind_rows(b, data.frame(Isolate = isolate, Slope = slope))
Tmin <- bind_rows(Tmin, data.frame(Isolate = isolate, Tmin = tmin))
}
# join the b and Tmin data frames to the unique_isolates data frame
results <- unique_isolates %>%
mutate(Isolate = as.character(Isolate)) %>%
left_join(b) %>%
left_join(Tmin)
# save results to a CSV file
write.csv(results, file = "Secondary model/OutputFiles/sec_model_new.csv", row.names = FALSE)
rm(list=ls())
# Calculate Q0 for each isolate
source("Calculate Nmax and Q0/UtilityFunctions_Q0.R")
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# Import data set
data_22dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_10dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
# Generate h0 table
h0_table <- rbind(data_22dC,data_10dC)
h0_table <- h0_table[,c("isolate","rep","temp","mumax",'lag')]
h0_table$mumax2 <- h0_table$mumax*24
h0_table$lag2 <- h0_table$lag/24
colnames(h0_table) <- c("isolate","rep","temp","mumax_ln_h","lag_h","mumax_ln_day","lag_day")
h0_table$h0 <- h0_table$mumax_ln_day*h0_table$lag_day
h0_table <- h0_table[order(h0_table$isolate), ]
h0_table <- h0_table[h0_table$lag_h != 0,]
# Save file
write.csv(h0_table,"Calculate Nmax and Q0/OutputFiles/h0 table.csv")
# Calculate Q0 for each isolate
source("Calculate Nmax and Q0/UtilityFunctions_Q0.R")
h0_table$Q0 = sapply(h0_table$h0, Calculate_Q0)
# Group the data by isolate and calculate the mean Q0 for each group
grouped_Q0 <- aggregate(h0_table$Q0, by = list(h0_table$isolate), FUN = mean)
colnames(grouped_Q0) <- c("isolate", "Q0")
# Calculate the mean h0 for each isolate
avg_h0 <- aggregate(h0 ~ isolate, data = h0_table, FUN = mean)
# Calculate the standard deviation of h0 for each isolate
sd_h0 <- aggregate(h0 ~ isolate, data = h0_table, FUN = sd)
# Merge the two data frames
grouped_h0 <- merge(avg_h0, sd_h0, by = "isolate")
# Rename the columns
colnames(grouped_h0) <- c("isolate", "mean_h0", "sd_h0")
# Merge the Q0 and h0 data frames
result <- merge(grouped_Q0, grouped_h0, by = "isolate")
# Export the results to a CSV file
write.csv(result, file = "Calculate Nmax and Q0/OutputFiles/Q0_h0_summary.csv", row.names = FALSE)
View(Calculate_Q0)
h0_table
rm(list=ls())
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
data_22dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_10dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
h0_table <- rbind(data_22dC,data_10dC)
h0_table
View(h0_table)
h0_table <- h0_table[,c("isolate","rep","temp","mumax",'lag')]
h0_table$mumax2 <- h0_table$mumax*24
h0_table$lag2 <- h0_table$lag/24
colnames(h0_table) <- c("isolate","rep","temp","mumax_ln_h","lag_h","mumax_ln_day","lag_day")
h0_table$h0 <- h0_table$mumax_ln_day*h0_table$lag_day
h0_table <- h0_table[order(h0_table$isolate), ]
h0_table <- h0_table[h0_table$lag_h != 0,]
# Save file
write.csv(h0_table,"Calculate Nmax and Q0/OutputFiles/h0 table.csv")
# Calculate Q0 for each isolate
source("Calculate Nmax and Q0/UtilityFunctions_Q0.R")
h0_table$Q0 = sapply(h0_table$h0, Calculate_Q0)
h0_table
View(h0_table)
rm(list=ls())
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
data_22dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_10dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
# Generate h0 table
h0_table <- rbind(data_22dC,data_10dC)
h0_table <- h0_table[,c("isolate","rep","temp","mumax",'lag')]
h0_table$mumax2 <- h0_table$mumax*24
h0_table$lag2 <- h0_table$lag/24
colnames(h0_table) <- c("isolate","rep","temp","mumax_ln_h","lag_h","mumax_ln_day","lag_day")
h0_table$h0 <- h0_table$mumax_ln_day*h0_table$lag_day
h0_table <- h0_table[order(h0_table$isolate), ]
h0_table <- h0_table[h0_table$lag_h != 0,]
# Save file
write.csv(h0_table,"Calculate Nmax and Q0/OutputFiles/h0 table.csv")
library(dplyr)
Q0_h0_summary <- h0_table %>%
group_by(isolate) %>%
summarize(avg_h0 = mean(h0, na.rm = TRUE),
sd_h0 = sd(h0, na.rm = TRUE))
Q0_h0_summary
View(Q0_h0_summary)
View(Q0_h0_summary)
# Calculate Q0 for each isolate
source("Calculate Nmax and Q0/UtilityFunctions_Q0.R")
# Calculate Q0 for each isolate
source("Calculate Nmax and Q0/UtilityFunctions_Q0.R")
Q0_h0_summary$Q0 = sapply(Q0_h0_summary$avg_h0, Calculate_Q0)
View(Q0_h0_summary)
View(Q0_h0_summary)
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# Import data set
data_22dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_10dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
# Generate h0 table
h0_table <- rbind(data_22dC,data_10dC)
h0_table <- h0_table[,c("isolate","rep","temp","mumax",'lag')]
h0_table$mumax2 <- h0_table$mumax*24
h0_table$lag2 <- h0_table$lag/24
colnames(h0_table) <- c("isolate","rep","temp","mumax_ln_h","lag_h","mumax_ln_day","lag_day")
h0_table$h0 <- h0_table$mumax_ln_day*h0_table$lag_day
h0_table <- h0_table[order(h0_table$isolate), ]
h0_table <- h0_table[h0_table$lag_h != 0,]
# Save file
write.csv(h0_table,"Calculate Nmax and Q0/OutputFiles/h0 table.csv")
# Calculate avg_h0 and sd_h0 for each isolate
library(dplyr)
Q0_h0_summary <- h0_table %>%
group_by(isolate) %>%
summarize(avg_h0 = mean(h0, na.rm = TRUE),
sd_h0 = sd(h0, na.rm = TRUE))
# Calculate Q0 for each isolate
source("Calculate Nmax and Q0/UtilityFunctions_Q0.R")
Q0_h0_summary$Q0 = sapply(Q0_h0_summary$avg_h0, Calculate_Q0)
# Export the results to a CSV file
write.csv(Q0_h0_summary, file = "Calculate Nmax and Q0/OutputFiles/Q0_h0_summary.csv", row.names = FALSE)
# Import data set
data_22dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_22dC_new.csv")
data_22dC$temp <- rep(22,34)
data_10dC <- read.csv("Calculate Nmax and Q0/InputFiles/gp_10dC_new.csv")
data_10dC$temp <- rep(10,30)
# Generate h0 table
h0_table <- rbind(data_22dC,data_10dC)
h0_table <- h0_table[,c("isolate","rep","temp","mumax",'lag')]
h0_table$mumax2 <- h0_table$mumax*24
h0_table$lag2 <- h0_table$lag/24
colnames(h0_table) <- c("isolate","rep","temp","mumax_ln_h","lag_h","mumax_ln_day","lag_day")
h0_table$h0 <- h0_table$mumax_ln_day*h0_table$lag_day
h0_table <- h0_table[order(h0_table$isolate), ]
h0_table <- h0_table[h0_table$lag_h != 0,]
# Save file
write.csv(h0_table,"Calculate Nmax and Q0/OutputFiles/h0 table.csv")
View(h0_table)
# Calculate avg_h0 and sd_h0 for each isolate
library(dplyr)
Q0_h0_summary <- h0_table %>%
group_by(isolate) %>%
summarize(avg_h0 = mean(h0, na.rm = TRUE),
sd_h0 = sd(h0, na.rm = TRUE))
View(Q0_h0_summary)
# Calculate Q0 for each isolate
source("Calculate Nmax and Q0/UtilityFunctions_Q0.R")
Q0_h0_summary$Q0 = sapply(Q0_h0_summary$avg_h0, Calculate_Q0)
# Export the results to a CSV file
write.csv(Q0_h0_summary, file = "Calculate Nmax and Q0/OutputFiles/Q0_h0_summary.csv", row.names = FALSE)
setwd("C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
library(biogrowth)
library(tibble)
library(EnvStats) # to load rtri function
library(truncnorm) # to load rtruncnorm function
library(jmuOutlier) # to load rlaplace function
rm(list=ls())
trace(biogrowth:::secondary_model_data, edit = T)
trace(biogrowth:::calculate_gammas, edit = T)
## Set up dataframe for modeling 100 units of HTST milk
n_sim = 100
data = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define t_H as 14, 35 days for all units
data$t_H <- rep(35, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
## Define function to select Topt by groups (from literature, create citation)
xopt_func <- function(clade){
if(clade == "II")
{return(36.31)}
else if(clade == "III")
{return(39.27)}
else if(clade == "IV")
{return(38.735)}
else if(clade == "V")
{return(37.375)}
else (clade == "VII")
{return(42.35)}
}
# Import data set
data_Q0 = read.csv("Exposure assessment model/InputFiles/Q0_h0_summary.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
# Generate simulation input
simulation_input <- data.frame(isolate = data_Q0$isolate[3:17], Q0 = data_Q0$Q0[3:17], Nmax = data_Nmax$average_Nmax[3:17],
b = data_sec_model$b[3:17], Tmin = data_sec_model$Tmin[3:17],Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
## Define new secondary model
reduced_Ratkowski = function(x, xmin, b, clade){
mu_opt = b * (xopt_func(clade) - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
# Run simulation for each isolate
# initialize a list to store the final concentrations
final_conc_d35 <- vector(mode = "list", length = nrow(simulation_input))
# loop over each sample
for (i in 1:nrow(simulation_input)) {
# initialize a list to store the final concentrations for this isolate
final_conc_isolate <- vector(mode = "list", length = n_sim)
# subset data by isolate
Iso <- simulation_input[i,]
# Prepare model input
xmin = Iso$Tmin
b = Iso$b
mu_opt = Iso$mu_opt # assume (Topt,sqrt(mu_opt)) is on the linear region
Q0 = Iso$Q0
# Run the models
my_primary <- list(mu_opt = mu_opt,   # in log10 scale
Nmax = Iso$Nmax,
N0 = 1e2,
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b,
clade = Iso$Clade)
my_secondary <- list(temperature = sec_temperature)
for (j in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[j,],
env_conditions = tibble(time = env_cond_time[j,],
temperature = env_cond_temp[j,]),
my_primary,
my_secondary)
sim = growth$simulation
# store the final concentration for this simulation
final_conc_isolate[[j]] <- tail(sim$logN, 1)
}
# store the final concentrations for all simulations for this isolate
final_conc_d35[[i]] <- final_conc_isolate
}
# Convert the list of 15 elements into a matrix
matrix <- t(sapply(final_conc_d35, unlist))
# Calculate the percentage over 5 for each row (element) in the matrix
percent_over_5_d35 <- rowMeans(matrix > 5) * 100
simulation_input$percent_over_5_d35 = percent_over_5_d35
# Output
Result = simulation_input
Result
write.csv(Result,"Exposure assessment model/OutputFiles/Result.csv")
rm(list=ls())
