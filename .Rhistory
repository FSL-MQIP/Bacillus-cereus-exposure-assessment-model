data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("I","II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
simulation_input <- data.frame(isolate = data_Q0$isolate,
Q0 = data_Q0$Q0,
Nmax = data_Nmax$average_Nmax,
b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,
Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
env_cond_time <- c(0:90)
count_by_isolate <- list()
for (i in unique(simulation_input$isolate)) {
# Set environment temperature based on isolate
if (i == 125) {
env_cond_temp <- 12
} else if (i == 638) {
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# Filter simulation input for current isolate
sim_input <- simulation_input %>% filter(isolate == i)
# Run simulation for current isolate
my_primary <- list(mu_opt = sim_input$mu_opt, Nmax = sim_input$Nmax, N0 = 1e2, Q0 = sim_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = sim_input$Tmin, b = sim_input$b, clade = sim_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, 91)),
my_primary,
my_secondary
)
sim <- growth$simulation
count <- tail(sim$logN, 1)
# Store results in list
count_by_isolate[[i]] <- count
}
# Convert list to data frame
count_by_isolate <- data.frame(isolate = names(count_by_isolate), count = unlist(count_by_isolate))
count
count_by_isolate
env_cond_time <- c(0:90)
count_by_isolate <- list()
for (i in unique(simulation_input$isolate)) {
# Set environment temperature based on isolate
if (i == 125) {
env_cond_temp <- 12
} else if (i == 638) {
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# Filter simulation input for current isolate
sim_input <- simulation_input %>% filter(isolate == i)
# Run simulation for current isolate
my_primary <- list(mu_opt = sim_input$mu_opt, Nmax = sim_input$Nmax, N0 = 1e2, Q0 = sim_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = sim_input$Tmin, b = sim_input$b, clade =sim_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, 91)),
my_primary,
my_secondary
)
sim <- growth$simulation
count <- tail(sim$logN, 1)
# Store results in list
count_by_isolate[[i]] <- count
}
# Convert list to data frame
count_by_isolate <- data.frame(isolate = names(count_by_isolate), count = unlist(count_by_isolate))
env_cond_time <- c(0:90)
count_by_isolate <- list()
for (i in unique(simulation_input$isolate)) {
# Set environment temperature based on isolate
if (i == 125) {
env_cond_temp <- 12
} else if (i == 638) {
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# Filter simulation input for current isolate
sim_input <- simulation_input %>% filter(isolate == i)
# Run simulation for current isolate
my_primary <- list(mu_opt = sim_input$mu_opt, Nmax = sim_input$Nmax, N0 = 1e2, Q0 = sim_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = sim_input$Tmin, b = sim_input$b, clade =sim_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, 91)),
my_primary,
my_secondary
)
sim <- growth$simulation
count <- tail(sim$logN, 1)
# Store results in list
count_by_isolate[[i]] <- count
}
count_by_isolate
library(purrr)
env_cond_time <- c(0:90)
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, 91)),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate
final_counts[[isolate_name]] <- final_count
}
# create a data frame of isolate names and final counts
count_by_isolate <- data.frame(isolate = isolate_names, count = unlist(final_counts))
View(count_by_isolate)
library(purrr)
env_cond_time <- c(0:90)
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, 91)),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate
final_counts[[isolate_name]] <- final_count
}
# create a data frame of isolate names and final counts
count_by_isolate <- data.frame(isolate = isolate_names, count = unlist(final_counts))
length(env_cond_time)
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:90), c(0:60), c(0:35), c(0:21), c(0:14))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
# loop over each isolate
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# loop over each env_cond_time vector
for (i in seq_along(env_cond_times)) {
env_cond_time <- env_cond_times[[i]]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, length(env_cond_time))),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate and env_cond_time combination
final_counts[[paste(isolate_name, "_", i, sep = "")]] <- final_count
}
}
# create a data frame of isolate names and final counts
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
View(count_by_isolate)
rm(list=ls())
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# load packages
library(tibble)
library(dplyr)
library(tidyr)
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# load utility functions
source("Exposure assessment model/UtilityFunctions_dynamic_growth.R")
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:14), c(0:21), c(0:35), c(0:60), c(0:90))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
data_Q0 = read.csv("Exposure assessment model/InputFiles/Q0_h0_summary.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("I","II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
simulation_input <- data.frame(isolate = data_Q0$isolate,
Q0 = data_Q0$Q0,
Nmax = data_Nmax$average_Nmax,
b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,
Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:14), c(0:21), c(0:35), c(0:60), c(0:90))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
# loop over each isolate
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# loop over each env_cond_time vector
for (i in seq_along(env_cond_times)) {
env_cond_time <- env_cond_times[[i]]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, length(env_cond_time))),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate and env_cond_time combination
final_counts[[paste(isolate_name, "_", i, sep = "")]] <- final_count
}
}
# create a data frame of isolate names and final counts
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
View(count_by_isolate)
label = rep(c(14,21,35,60,90),16)
count_by_isolate = count_by_isolate$label
View(count_by_isolate)
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
label = as.data.frame(label)
count_by_isolate = count_by_isolate$label
# create a data frame of isolate names and final counts
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
label = rep(c(14,21,35,60,90),16)
count_by_isolate$days = label
View(count_by_isolate)
rm(list = ls())
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# load packages
library(tibble)
library(dplyr)
library(tidyr)
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
# load utility functions
source("Exposure assessment model/UtilityFunctions_dynamic_growth.R")
data_Q0 = read.csv("Exposure assessment model/InputFiles/Q0_h0_summary.csv")
data_Nmax = read.csv("Exposure assessment model/InputFiles/Nmax_new.csv")
data_sec_model = read.csv("Exposure assessment model/InputFiles/sec_model_new.csv")
Clade = c("I","II","VII","IV","IV","IV","IV","II","III","IV","II","VII","II","V","V","IV")
simulation_input <- data.frame(isolate = data_Q0$isolate,
Q0 = data_Q0$Q0,
Nmax = data_Nmax$average_Nmax,
b = data_sec_model$Slope,
Tmin = data_sec_model$Tmin,
Clade)
simulation_input$Topt = sapply(simulation_input$Clade, xopt_func)
simulation_input$mu_opt = (simulation_input$b*(simulation_input$Topt-simulation_input$Tmin))^2
# create a tibble with environmental conditions over time (3dC)
env_cond_time <- c(0:90)
env_cond_temp <- 3
# group the data by isolate name
simulation_input_groups <- simulation_input %>%
group_by(isolate)
# run simulation (3dC)
count_d90_by_isolate <- simulation_input_groups %>%
nest() %>%
mutate(
count_d90 = map(data, ~{
my_primary <- list(mu_opt = .$mu_opt, Nmax = .$Nmax, N0 = 1e2, Q0 = .$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = .$Tmin, b = .$b, clade = .$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, 91)),
my_primary,
my_secondary
)
sim <- growth$simulation
tail(sim$logN, 1)
})
) %>%
select(isolate, count_d90)
count_d90_by_isolate <- as.data.frame(count_d90_by_isolate)
simulation_Tmin_result = do.call(rbind,count_d90_by_isolate)
write.csv(simulation_Tmin_result,"Exposure assessment model/OutputFiles/simulation_Tmin_result.csv")
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:14), c(0:21), c(0:35), c(0:60), c(0:90))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
# loop over each isolate
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# loop over each env_cond_time vector
for (i in seq_along(env_cond_times)) {
env_cond_time <- env_cond_times[[i]]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, length(env_cond_time))),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate and env_cond_time combination
final_counts[[paste(isolate_name, "_", i, sep = "")]] <- final_count
}
}
# create a data frame of isolate names, final counts and days
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
days = rep(c(14,21,35,60,90),16)
count_by_isolate$days = label
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:14), c(0:21), c(0:35), c(0:60), c(0:90))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
# loop over each isolate
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# loop over each env_cond_time vector
for (i in seq_along(env_cond_times)) {
env_cond_time <- env_cond_times[[i]]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, length(env_cond_time))),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate and env_cond_time combination
final_counts[[paste(isolate_name, "_", i, sep = "")]] <- final_count
}
}
# create a data frame of isolate names, final counts and days
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
days = rep(c(14,21,35,60,90),16)
count_by_isolate$days = days
write.csv(count_by_isolate,"Exposure assessment model/OutputFiles/simulation_result.csv")
knitr::opts_knit$set(root.dir = "C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model")
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:14), c(0:21), c(0:35), c(0:60), c(0:90))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
# loop over each isolate
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# loop over each env_cond_time vector
for (i in seq_along(env_cond_times)) {
env_cond_time <- env_cond_times[[i]]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, length(env_cond_time))),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate and env_cond_time combination
final_counts[[paste(isolate_name, "_", i, sep = "")]] <- final_count
}
}
# create a data frame of isolate names, final counts and days
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
days = rep(c(14,21,35,60,90),16)
count_by_isolate$days = days
write.csv(count_by_isolate,"Exposure assessment model/OutputFiles/simulation_result.csv")
class(count_by_isolate)
View(count_by_isolate)
# define the env_cond_time vectors for each simulation
env_cond_times <- list(c(0:14), c(0:21), c(0:35), c(0:60), c(0:90))
# create a vector of isolate names
isolate_names <- unique(simulation_input$isolate)
# create a list to store the final counts
final_counts <- list()
# loop over each isolate
for (isolate_name in isolate_names) {
# get the simulation input for the current isolate
isolate_input <- simulation_input[simulation_input$isolate == isolate_name, ]
# loop over each env_cond_time vector
for (i in seq_along(env_cond_times)) {
env_cond_time <- env_cond_times[[i]]
# set the environment condition temperature based on the isolate
if (isolate_input$isolate == 125){
env_cond_temp <- 12
} else if (isolate_input$isolate == 638){
env_cond_temp <- 7
} else {
env_cond_temp <- 9
}
# run simulation
my_primary <- list(mu_opt = isolate_input$mu_opt, Nmax = isolate_input$Nmax, N0 = 1e2, Q0 = isolate_input$Q0)
sec_temperature <- list(model = "reducedRatkowsky", xmin = isolate_input$Tmin, b = isolate_input$b, clade = isolate_input$Clade)
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(
times = env_cond_time,
env_conditions = tibble(time = env_cond_time, temperature = rep(env_cond_temp, length(env_cond_time))),
my_primary,
my_secondary
)
sim <- growth$simulation
final_count <- tail(sim$logN, 1)[[1]]
# store the final count for the isolate and env_cond_time combination
final_counts[[paste(isolate_name, "_", i, sep = "")]] <- final_count
}
}
# create a data frame of isolate names, final counts and days
count_by_isolate <- data.frame(isolate_env_time = names(final_counts), count = unlist(final_counts))
days = rep(c(14,21,35,60,90),16)
count_by_isolate$days = days
write.csv(count_by_isolate,"Exposure assessment model/OutputFiles/simulation_result.csv")
