# define the new secondary model
reduced_Ratkowski = function(x, xmin, b){
xopt = xopt_func("IV")                   # change for different B cereus groups to give different xopt
mu_opt = b * (xopt - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
# Subset data for each isolate
Iso495 = subset(growth_data,isolate == 495)
# Prepare model input
mu = Iso495$mumax    # 10dC rep1 bar data, mu is in log 10 CFU/mL per day
lambda = Iso495$lag         # 10dC rep 1 bar data, lambda is in d
Q0 = lambda_to_Q0(lambda, mu, logbase_mu = 10)
xmin = Iso495$Tmin
b = Iso495$b
mu_opt = (b*(xopt_func("IV")-xmin))^2 # assume (Topt,sqrt(mu_opt)) is on the linear region
# Run the models
my_primary <- list(mu_opt = mu_opt,
Nmax = Iso495$Nmax,     # 10dC rep 1 bar data, Nmax is in CFU/mL
N0 = 1e2,          # depending on product testing result, assumed in this case
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b)
my_secondary <- list(temperature = sec_temperature)
for (i in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
# Generate output
data_495_d35<-data
data_495_d35$isolate <- 495
Iso495_d35_HR = sum(data_495_d35$conc>5)/100
# define the new secondary model
reduced_Ratkowski = function(x, xmin, b){
xopt = xopt_func("II")                   # change for different B cereus groups to give different xopt
mu_opt = b * (xopt - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
# Subset data for each isolate
Iso518 = subset(growth_data,isolate == 518)
# Prepare model input
mu = Iso518$mumax    # 10dC rep1 bar data, mu is in log 10 CFU/mL per day
lambda = Iso518$lag         # 10dC rep 1 bar data, lambda is in d
Q0 = lambda_to_Q0(lambda, mu, logbase_mu = 10)
xmin = Iso518$Tmin
b = Iso518$b
mu_opt = (b*(xopt_func("II")-xmin))^2 # assume (Topt,sqrt(mu_opt)) is on the linear region
# Run the models
my_primary <- list(mu_opt = mu_opt,
Nmax = Iso518$Nmax,     # 10dC rep 1 bar data, Nmax is in CFU/mL
N0 = 1e2,          # depending on product testing result, assumed in this case
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b)
my_secondary <- list(temperature = sec_temperature)
for (i in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
# Generate output
data_518_d35<-data
data_518_d35$isolate <- 518
Iso518_d35_HR = sum(data_518_d35$conc>5)/100
# define the new secondary model
reduced_Ratkowski = function(x, xmin, b){
xopt = xopt_func("VII")                   # change for different B cereus groups to give different xopt
mu_opt = b * (xopt - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
# Subset data for each isolate
Iso536 = subset(growth_data,isolate == 536)
# Prepare model input
mu = Iso536$mumax    # 10dC rep1 bar data, mu is in log 10 CFU/mL per day
lambda = Iso536$lag         # 10dC rep 1 bar data, lambda is in d
Q0 = lambda_to_Q0(lambda, mu, logbase_mu = 10)
xmin = Iso536$Tmin
b = Iso536$b
mu_opt = (b*(xopt_func("VII")-xmin))^2 # assume (Topt,sqrt(mu_opt)) is on the linear region
# Run the models
my_primary <- list(mu_opt = mu_opt,
Nmax = Iso536$Nmax,     # 10dC rep 1 bar data, Nmax is in CFU/mL
N0 = 1e2,          # depending on product testing result, assumed in this case
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b)
my_secondary <- list(temperature = sec_temperature)
for (i in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
# Generate output
data_536_d35<-data
data_536_d35$isolate <- 536
Iso536_d35_HR = sum(data_536_d35$conc>5)/100
# define the new secondary model
reduced_Ratkowski = function(x, xmin, b){
xopt = xopt_func("II")                   # change for different B cereus groups to give different xopt
mu_opt = b * (xopt - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
# Subset data for each isolate
Iso564 = subset(growth_data,isolate == 564)
# Prepare model input
mu = Iso564$mumax    # 10dC rep1 bar data, mu is in log 10 CFU/mL per day
lambda = Iso564$lag         # 10dC rep 1 bar data, lambda is in d
Q0 = lambda_to_Q0(lambda, mu, logbase_mu = 10)
xmin = Iso564$Tmin
b = Iso564$b
mu_opt = (b*(xopt_func("II")-xmin))^2 # assume (Topt,sqrt(mu_opt)) is on the linear region
# Run the models
my_primary <- list(mu_opt = mu_opt,
Nmax = Iso564$Nmax,     # 10dC rep 1 bar data, Nmax is in CFU/mL
N0 = 1e2,          # depending on product testing result, assumed in this case
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b)
my_secondary <- list(temperature = sec_temperature)
for (i in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
# Generate output
data_564_d35<-data
data_564_d35$isolate <- 564
Iso564_d35_HR = sum(data_564_d35$conc>5)/100
# define the new secondary model
reduced_Ratkowski = function(x, xmin, b){
xopt = xopt_func("V")                   # change for different B cereus groups to give different xopt
mu_opt = b * (xopt - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
# Subset data for each isolate
Iso570 = subset(growth_data,isolate == 570)
# Prepare model input
mu = Iso570$mumax    # 10dC rep1 bar data, mu is in log 10 CFU/mL per day
lambda = Iso570$lag         # 10dC rep 1 bar data, lambda is in d
Q0 = lambda_to_Q0(lambda, mu, logbase_mu = 10)
xmin = Iso570$Tmin
b = Iso570$b
mu_opt = (b*(xopt_func("V")-xmin))^2 # assume (Topt,sqrt(mu_opt)) is on the linear region
# Run the models
my_primary <- list(mu_opt = mu_opt,
Nmax = Iso570$Nmax,     # 10dC rep 1 bar data, Nmax is in CFU/mL
N0 = 1e2,          # depending on product testing result, assumed in this case
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b)
my_secondary <- list(temperature = sec_temperature)
for (i in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
# Generate output
data_570_d35<-data
data_570_d35$isolate <- 570
Iso570_d35_HR = sum(data_570_d35$conc>5)/100
# Subset data for each isolate
Iso638 = subset(growth_data,isolate == 638)
# Prepare model input
mu = Iso638$mumax    # 10dC rep1 bar data, mu is in log 10 CFU/mL per day
lambda = Iso638$lag         # 10dC rep 1 bar data, lambda is in d
Q0 = lambda_to_Q0(lambda, mu, logbase_mu = 10)
xmin = Iso638$Tmin
b = Iso638$b
# Run the models
my_primary <- list(mu_opt = mu_opt,
Nmax = Iso638$Nmax,     # 10dC rep 1 bar data, Nmax is in CFU/mL
N0 = 1e2,          # depending on product testing result, assumed in this case
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b)
my_secondary <- list(temperature = sec_temperature)
for (i in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
# Generate output
data_638_d35<-data
data_638_d35$isolate <- 638
Iso638_d35_HR = sum(data_638_d35$conc>5)/100
# define the new secondary model
reduced_Ratkowski = function(x, xmin, b){
xopt = xopt_func("IV")                   # change for different B cereus groups to give different xopt
mu_opt = b * (xopt - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
# Subset data for each isolate
Iso649 = subset(growth_data,isolate == 649)
# Prepare model input
mu = Iso649$mumax    # 10dC rep1 bar data, mu is in log 10 CFU/mL per day
lambda = Iso649$lag         # 10dC rep 1 bar data, lambda is in d
Q0 = lambda_to_Q0(lambda, mu, logbase_mu = 10)
xmin = Iso649$Tmin
b = Iso649$b
mu_opt = (b*(xopt_func("IV")-xmin))^2 # assume (Topt,sqrt(mu_opt)) is on the linear region
# Run the models
my_primary <- list(mu_opt = mu_opt,
Nmax = Iso649$Nmax,     # 10dC rep 1 bar data, Nmax is in CFU/mL
N0 = 1e2,          # depending on product testing result, assumed in this case
Q0 = Q0)
sec_temperature <- list(model = "reducedRatkowsky",
xmin = xmin,
b = b)
my_secondary <- list(temperature = sec_temperature)
for (i in 1:n_sim){
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
# Generate output
data_649_d35<-data
data_649_d35$isolate <- 649
Iso649_d35_HR = sum(data_649_d35$conc>5)/100
save.image("C:/Users/sujun/OneDrive/Documents/RWork/Jun's project/Dynamic temperature modeling.RData")
rm(list=ls())
rm(list=ls())
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slide for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
ui
server <- function(input, output) {
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x),max(x),length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc", border = "white",
xlab = "Waiting time to next eruption (in minutes",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# ui
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slide for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# server
# Define server logic required to draw a histogram ----
server <- function(input, output) {
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x),max(x),length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc", border = "white",
xlab = "Waiting time to next eruption (in minutes",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x),max(x),length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc", border = "red",
xlab = "Waiting time to next eruption (in minutes",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x),max(x),length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc",
xlab = "Waiting time to next eruption (in minutes",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
runApp("my_app")
rm(list = ls())
rm(list=ls())
library(nlsMicrobio)
library(minpack.lm)
setwd("C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model/Primary model/InputFiles")
# Import dataset
data <-read.csv("data_16_new.csv")
# Import dataset
data <-read.csv("data_16_new.csv")
# Subset data
Iso125Rep1 = subset(data,Rep == "rep1" & Isolate == 125)
Iso125Rep1
colnames(data) = c("t","Rep","LOG10N","Isolate")
# Subset data
Iso125Rep1 = subset(data,Rep == "rep1" & Isolate == 125)
Iso125Rep1
# Plot
plot(Iso125Rep1$t,Iso125Rep1$LOG10N)
mod<-lm(Iso125Rep1$LOG10N[7:8]~Iso125Rep1$t[7:8])
slope = coef(mod)[2]*log(10)
mod<-lm(Iso125Rep1$LOG10N[6:8]~Iso125Rep1$t[6:8])
slope = coef(mod)[2]*log(10)
slope
# Fitting Baranyi model
Iso125Rep1.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso125Rep1,
start=list (
LOG10N0 = 4,
lag = 8,
mumax = 0.2847068,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
# Load packages
library(nlsMicrobio)
library(minpack.lm)
# Fitting Baranyi model
Iso125Rep1.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso125Rep1,
start=list (
LOG10N0 = 4,
lag = 8,
mumax = 0.2847068,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
# Baranyi
baranyi_log10N = function(t,lag,mumax,LOG10N0,LOG10Nmax) {
ans <- LOG10Nmax + log10((-1 + exp(mumax * lag) + exp(mumax *
t))/(exp(mumax * t) - 1 + exp(mumax * lag) * 10^(LOG10Nmax -
LOG10N0)))
return(ans)
}
# Fitting Baranyi model
Iso125Rep1.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso125Rep1,
start=list (
LOG10N0 = 4,
lag = 8,
mumax = 0.2847068,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
Iso125Rep1.bar_LM
# Subset data
Iso125Rep2 = subset(data,Rep == "rep2" & Isolate == 125)
# Plot
plot(Iso125Rep2$t,Iso125Rep2$LOG10N)
mod<-lm(Iso125Rep2$LOG10N[7:8]~Iso125Rep2$t[7:8])
slope = coef(mod)[2]*log(10)
# Fitting Baranyi model
Iso125Rep2.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso125Rep2,
start=list (
LOG10N0 = 4,
lag = 18,
mumax = 0.66,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
Iso125Rep2.bar_LM
# Plot
plot(Iso125Rep1$t,Iso125Rep1$LOG10N)
mod<-lm(Iso125Rep1$LOG10N[7:8]~Iso125Rep1$t[7:8])
slope = coef(mod)[2]*log(10)
# Fitting Baranyi model
Iso125Rep1.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso125Rep1,
start=list (
LOG10N0 = 4,
lag = 18,
mumax = 0.722,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
Iso125Rep1.bar_LM
# Plot
plot(Iso125Rep1$t,Iso125Rep1$LOG10N)
lines(Iso125Rep1$t,fitted(Iso125Rep1.bar_LM),col="red")
# Plot
plot(Iso125Rep2$t,Iso125Rep2$LOG10N)
lines(Iso125Rep2$t,fitted(Iso125Rep2.bar_LM),col="red")
mod<-lm(Iso125Rep1$LOG10N[6:9]~Iso125Rep1$t[6:9])
slope = coef(mod)[2]*log(10)
# Fitting Baranyi model
Iso125Rep1.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso125Rep1,
start=list (
LOG10N0 = 4,
lag = 8,
mumax = 0.263,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
Iso125Rep1.bar_LM
# Subset data
Iso135Rep1 = subset(data,Rep == "rep1" & Isolate == 135)
# Plot
plot(Iso135Rep1$t,Iso135Rep1$LOG10N)
mod<-lm(Iso135Rep1$LOG10N[6:9]~Iso135Rep1$t[6:9])
slope = coef(mod)[2]*log(10)
# Fitting Baranyi model
Iso135Rep1.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso135Rep1,
start=list (
LOG10N0 = 3.8,
lag = 8,
mumax = 0.323,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
Iso135Rep1.bar_LM
mod<-lm(Iso135Rep1$LOG10N[7:8]~Iso135Rep1$t[7:8])
slope = coef(mod)[2]*log(10)
# Fitting Baranyi model
Iso135Rep1.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso135Rep1,
start=list (
LOG10N0 = 3.8,
lag = 8,
mumax = 0.779,
LOG10Nmax = 6.3),
lower = c(0,0,0,0))
Iso135Rep1.bar_LM
# Subset data
Iso135Rep2 = subset(data,Rep == "rep2" & Isolate == 135)
# Plot
plot(Iso135Rep2$t,Iso135Rep2$LOG10N)
mod<-lm(Iso135Rep2$LOG10N[6:8]~Iso135Rep2$t[6:8])
slope = coef(mod)[2]*log(10)
# Fitting Baranyi model
Iso135Rep2.bar_LM <- nlsLM(LOG10N ~ baranyi_log10N(t,lag,mumax,LOG10N0,LOG10Nmax), data=Iso135Rep2,
start=list (
LOG10N0 = 3.6,
lag = 8,
mumax = 0.389,
LOG10Nmax = 6),
lower = c(0,0,0,0))
Iso135Rep2.bar_LM
