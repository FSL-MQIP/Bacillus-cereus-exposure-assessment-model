isolate <- unique_isolates$isolate[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
my_primary <- list(mu_opt = isolate_data$mu_opt[i],
Nmax = isolate_data$Nmax[i],
N0 = isolate_data$N0[i],
Q0 = isolate_data$Q0[i])
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin[i],
b = isolate_data$b[i])
my_secondary <- list(temperature = sec_temperature)
}
my_primary
unique_isolates <- unique(data1[c("isolate")])
my_primary <- list()
my_secondary <-list()
for (i in 1:nrow(unique_isolates)) {
isolate <- unique_isolates$isolate[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin[i],
b = isolate_data$b[i])
mu_opt = (b*(xopt_func(isolate_data$group[i])-xmin))^2
my_primary <- list(mu_opt = isolate_data$mu_opt[i],
Nmax = isolate_data$Nmax[i],
N0 = isolate_data$N0[i],
Q0 = isolate_data$Q0[i])
my_secondary <- list(temperature = sec_temperature)
}
my_primary
unique_isolates <- unique(data1[c("isolate")])
my_primary <- list()
my_secondary <-list()
for (i in 1:nrow(unique_isolates)) {
isolate <- unique_isolates$isolate[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin[i],
b = isolate_data$b[i])
mu_opt = (b*(xopt_func(isolate_data$group[i])-xmin))^2
my_primary <- list(mu_opt = mu_opt[i],
Nmax = isolate_data$Nmax[i],
N0 = isolate_data$N0[i],
Q0 = isolate_data$Q0[i])
my_secondary <- list(temperature = sec_temperature)
}
my_primary
my_secondary
unique_isolates <- unique(data1[c("isolate")])
sec_temperature <- list()
mu_opt <- list()
my_primary <- list()
my_secondary <-list()
for (i in 1:nrow(unique_isolates)) {
isolate <- unique_isolates$isolate[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin[i],
b = isolate_data$b[i])
mu_opt = (b*(xopt_func(isolate_data$group[i])-xmin))^2
my_primary <- list(mu_opt = mu_opt[i],
Nmax = isolate_data$Nmax[i],
N0 = isolate_data$N0[i],
Q0 = isolate_data$Q0[i])
my_secondary <- list(temperature = sec_temperature)
}
my_primary
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
my_primary
data2 <- data.frame(time = env_cond_time[,1], conc = NA)
data2
data
View(data)
# Assuming you have defined env_cond_time and env_cond_temp as matrices or data frames
# Initialize the data data frame
data <- data.frame(time = env_cond_time[,1], conc = NA)
# Loop over the rows of the env_cond_time and env_cond_temp matrices/data frames
for (i in 1:nrow(env_cond_time)) {
# Call predict_dynamic_growth with my_primary and my_secondary
growth = predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary = my_primary[[i]],
my_secondary = my_secondary[[i]])
# Extract the simulation results and store the final concentration in the data data frame
sim = growth$simulation
data$conc[i] = tail(sim$logN, 1)
}
unique_groups <- unique(data1$group)
reduced_Ratkowski_functions <- list()
for (i in 1:length(unique_groups)) {
group <- unique_groups[i]
group_data <- subset(data1, group == group) # subset the data for the current group
reduced_Ratkowski_functions[[i]] <- function(x, xmin, b){
xopt = xopt_func(group_data$group)
mu_opt = b * (xopt - xmin)
gamma = b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
}
reduced_Ratkowski_functions
trace(biogrowth:::secondary_model_data, edit = T)
trace(biogrowth:::calculate_gammas, edit = T)
xopt_func <- function(group_name){
if(group_name == "II")
{return(36.31)}
else if(group_name == "III")
{return(39.27)}
else if(group_name == "IV")
{return(38.735)}
else if(group_name == "V")
{return(37.375)}
else (group_name == "VII")
{return(42.35)}
}
reduced_Ratkowski <- function(x, xmin, b, group_name) {
xopt <- xopt_func(group_name)
mu_opt <- b * (xopt - xmin)
gamma <- b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
sec_temperature <- list(model = "reducedRatkowsky",
xmin = 4,
b = 0.2,
group_name = II
)
sec_temperature <- list(model = "reducedRatkowsky",
+                         xmin = 4,
+                         b = 0.2,
+                         group_name = "II")
sec_temperature <- list(model = "reducedRatkowsky",
xmin = 4,
b = 0.2,
group_name = "II"
)
Iso193 = subset(data1, isolate == 193)
sec_temperature <- list(model = "reducedRatkowsky",
+                         xmin = Iso193$Tmin,
+                         b = Iso193$b,
+                         group_name = Iso193$group
+ )
# import data set
data1 <- read.csv("InputFiles/simulation_input.csv")
colnames(data1) <- c("isolate","Q0","Nmax","b","Tmin","group")
data1$N0 <- 1e2
data1
sec_temperature <- list(model = "reducedRatkowsky",
+                         xmin = Iso193$Tmin,
+                         b = Iso193$b,
+                         group_name = Iso193$group
+ )
Iso193$group
Iso193
sec_temperature <- list(model = "reducedRatkowsky",
xmin = Iso193$Tmin,
b = Iso193$b,
group_name = Iso193$group
)
sec_temperature
# import data set
data1 <- read.csv("InputFiles/simulation_input.csv")
colnames(data1) <- c("isolate","Q0","Nmax","b","Tmin","group")
data1$N0 <- 1e2
xopt_func <- function(group_name){
if(group_name == "II")
{return(36.31)}
else if(group_name == "III")
{return(39.27)}
else if(group_name == "IV")
{return(38.735)}
else if(group_name == "V")
{return(37.375)}
else (group_name == "VII")
{return(42.35)}
}
rm(list=ls())
# import data set
data1 <- read.csv("InputFiles/simulation_input.csv")
colnames(data1) <- c("isolate","Q0","Nmax","b","Tmin","group")
data1$N0 <- 1e2
## Set up dataframe for modeling 100 units of HTST milk
n_sim = 100
data = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define t_H as 14, 35 days for all units
data$t_H <- rep(35, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
xopt_func <- function(group_name){
if(group_name == "II")
{return(36.31)}
else if(group_name == "III")
{return(39.27)}
else if(group_name == "IV")
{return(38.735)}
else if(group_name == "V")
{return(37.375)}
else (group_name == "VII")
{return(42.35)}
}
reduced_Ratkowski <- function(x, xmin, b, group_name) {
xopt <- xopt_func(group_name)
mu_opt <- b * (xopt - xmin)
gamma <- b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
b
unique_isolates <- unique(data1$isolate)
unique_isolates
xmin
isolate_data
View(isolate_data)
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
print(isolate_data)
# import data set
data1 <- read.csv("InputFiles/simulation_input.csv")
colnames(data1) <- c("isolate","Q0","Nmax","b","Tmin","group")
data1$N0 <- 1e2
trace(biogrowth:::secondary_model_data, edit = T)
trace(biogrowth:::calculate_gammas, edit = T)
## Set up dataframe for modeling 100 units of HTST milk
n_sim = 100
data = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define t_H as 14, 35 days for all units
data$t_H <- rep(35, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
xopt_func <- function(group_name){
if(group_name == "II")
{return(36.31)}
else if(group_name == "III")
{return(39.27)}
else if(group_name == "IV")
{return(38.735)}
else if(group_name == "V")
{return(37.375)}
else (group_name == "VII")
{return(42.35)}
}
reduced_Ratkowski <- function(x, xmin, b, group_name) {
xopt <- xopt_func(group_name)
mu_opt <- b * (xopt - xmin)
gamma <- b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
isolate_data
isolate_data$Tmin
isolate_data$b
isolate_data$group
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
mu_opt
b
my_secondary
isolate_data$group
b
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (isolate_data$b*(xopt_func(isolate_data$group)-isolate_data$xmin))^2
my_primary <- list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0)
my_secondary <- list(temperature = sec_temperature)
}
sec_temperature
View(sec_temperature)
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin[i] = isolate_data$Tmin,
xopt_func("II")
data1
# import data set
data1 <- read.csv("InputFiles/simulation_input.csv")
colnames(data1) <- c("isolate","Q0","Nmax","b","Tmin","group")
data1$N0 <- 1e2
rm(list=ls())
library(biogrowth)
?lambda_to_Q0
rm(list=ls())
# Load packages
library(nlsMicrobio)
library(minpack.lm)
# Import data
# 22dC data
data1 <-read.csv("data1.csv")
setwd("C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model/InputFiles")
# 10dC data
data_10dC <- read.csv("SMB_10degC_Compiled.csv")
data_10dC <- data_10dC[,1:4]
data_10dC_new <- read.csv("Iso_193_10degC.csv")
data_10dC
colnames(data_10dC) = c("t","Rep","LOG10N","Isolate")
data_10dC
data_10dC$t = as.numeric(data_10dC$t)
data_10dC$LOG10N = as.numeric(data_10dC$LOG10N)
rm("data_10dC_new")
# Subset data
Iso413Rep1 <- subset(data_10dC, Isolate == "413" & Rep =="rep1")
plot(Iso413Rep1$t,Iso413Rep1$LOG10N)
