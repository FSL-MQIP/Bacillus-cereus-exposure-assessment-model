## (b) Define t_H as 14, 35 days for all units
data$t_H <- rep(35, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
xopt_func <- function(group_name){
if(group_name == "II")
{return(36.31)}
else if(group_name == "III")
{return(39.27)}
else if(group_name == "IV")
{return(38.735)}
else if(group_name == "V")
{return(37.375)}
else (group_name == "VII")
{return(42.35)}
}
reduced_Ratkowski <- function(x, xmin, b, group_name) {
xopt <- xopt_func(group_name)
mu_opt <- b * (xopt - xmin)
gamma <- b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
b
unique_isolates <- unique(data1$isolate)
unique_isolates
xmin
isolate_data
View(isolate_data)
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
print(isolate_data)
# import data set
data1 <- read.csv("InputFiles/simulation_input.csv")
colnames(data1) <- c("isolate","Q0","Nmax","b","Tmin","group")
data1$N0 <- 1e2
trace(biogrowth:::secondary_model_data, edit = T)
trace(biogrowth:::calculate_gammas, edit = T)
## Set up dataframe for modeling 100 units of HTST milk
n_sim = 100
data = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
data$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
data$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
data$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
data$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
data$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
data$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
data$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
data$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
data$T_H <- temps
## (b) Define t_H as 14, 35 days for all units
data$t_H <- rep(35, each = n_sim)
## Model temperature profiles of 100 units HTST milk
env_cond_time <- matrix(c(rep(0,100),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
xopt_func <- function(group_name){
if(group_name == "II")
{return(36.31)}
else if(group_name == "III")
{return(39.27)}
else if(group_name == "IV")
{return(38.735)}
else if(group_name == "V")
{return(37.375)}
else (group_name == "VII")
{return(42.35)}
}
reduced_Ratkowski <- function(x, xmin, b, group_name) {
xopt <- xopt_func(group_name)
mu_opt <- b * (xopt - xmin)
gamma <- b * (x - xmin)
gamma <- gamma/mu_opt
gamma <- gamma^2
gamma[x < xmin] <- 0
return(gamma)
}
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
isolate_data
isolate_data$Tmin
isolate_data$b
isolate_data$group
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (b*(xopt_func(isolate_data$group)-xmin))^2
my_primary <- append(my_primary, list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0))
my_secondary <- append(my_secondary, list(temperature = sec_temperature))
}
mu_opt
b
my_secondary
isolate_data$group
b
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin = isolate_data$Tmin,
b = isolate_data$b,
group_name = isolate_data$group
)
mu_opt = (isolate_data$b*(xopt_func(isolate_data$group)-isolate_data$xmin))^2
my_primary <- list(mu_opt = mu_opt,
Nmax = isolate_data$Nmax,
N0 = isolate_data$N0,
Q0 = isolate_data$Q0)
my_secondary <- list(temperature = sec_temperature)
}
sec_temperature
View(sec_temperature)
unique_isolates <- unique(data1$isolate)
my_primary <- list()
my_secondary <- list()
for (i in 1:length(unique_isolates)) {
isolate <- unique_isolates[i]
isolate_data <- subset(data1, isolate == isolate) # subset the data for the current isolate
sec_temperature <- list(model = "reducedRatkowsky",
xmin[i] = isolate_data$Tmin,
xopt_func("II")
data1
# import data set
data1 <- read.csv("InputFiles/simulation_input.csv")
colnames(data1) <- c("isolate","Q0","Nmax","b","Tmin","group")
data1$N0 <- 1e2
rm(list=ls())
library(biogrowth)
?lambda_to_Q0
rm(list=ls())
rm(list=ls())
rm(list=ls())
trace(biogrowth:::predict_dynamic_growth,edit = T)
rm(liost=ls())
rm(list=ls())
?epi.prcc
??epi.prcc
rm(list=ls())
rm(list=ls())
# Reduce contamination frequency
# Define the probability vectors
prob50 <- c(0.5, 0.5)
prob10 <- c(0.1, 0.9)
result50 = rep(x, round(n * prob50))
result10 = rep(x, round(n * prob10))
# Sample from the probability vectors to create the contamination status
contam_BySample_freq50<-as.vector(replicate(n_sim, sample(result50)))
## Set simulation setting
n_sim = 10000
n_halfgal = 10
# Reduce contamination frequency
# Define the probability vectors
prob50 <- c(0.5, 0.5)
prob10 <- c(0.1, 0.9)
result50 = rep(x, round(n * prob50))
result10 = rep(x, round(n * prob10))
library(shiny); runApp('C:/Users/sujun/OneDrive/Documents/RWork/PPC gram negative bacteria in fluid milk/App/App_PPC_new.R')
# Reduce contamination frequency
# Define the probability vectors
x = c(1,0)
prob50 <- c(0.5, 0.5)
prob10 <- c(0.1, 0.9)
result50 = rep(x, round(n * prob50))
result10 = rep(x, round(n * prob10))
runApp('C:/Users/sujun/OneDrive/Documents/RWork/PPC gram negative bacteria in fluid milk/App/App_PPC_new.R')
rm(list=ls())
rm(list=ls())
rm(list=ls())
library(shiny); runApp('GitHub/Bacillus-cereus-exposure-assessment-model/BRisk app/BRisk.R')
runApp('GitHub/Bacillus-cereus-exposure-assessment-model/BRisk app/BRisk.R')
class(result)
runApp('GitHub/Bacillus-cereus-exposure-assessment-model/BRisk app/BRisk.R')
rm(list=ls())
library(tidyverse)
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
library(ggplot2)
# Load utility functions
source("UtilityFunctions_dynamic_growth.R")
setwd("C:/Users/sujun/Documents/GitHub/Bacillus-cereus-exposure-assessment-model/BRisk app")
library(tidyverse)
library(tibble)
library(EnvStats)         # to load rtri function
library(truncnorm)        # to load rtruncnorm function
library(jmuOutlier)       # to load rlaplace function
library(formula.tools)    # to load 'rhs'
library(purrr)            # to load 'map'
library(deSolve)          # to load 'ode'
library(rlang)
library(ggplot2)
# Load utility functions
source("UtilityFunctions_dynamic_growth.R")
# Generate database
BTyper3_input = read.csv("Btyper3_Results.csv")
colnames(BTyper3_input)[1] <- "Isolate.Name"
gp_input = read.csv("simulation_input.csv")
database = cbind(BTyper3_input,gp_input[,3:7])
database <- database %>%
separate(Closest_Type_Strain.ANI., into = c("species","ANI"), sep = "\\(") %>%
mutate(ANI = gsub("\\)", "", ANI))
# Define ui
ui <- fluidPage(
titlePanel("BRisk"),
sidebarLayout(
sidebarPanel(
numericInput("n0", "Initial count:", value = 100),  # Numeric input for "initial count"
numericInput("d", "Storage day:", value = 35),  # Numeric input for "storage day"
fileInput("file", "Input BTyper3 result for a detected B cereus isolate")  # BTyper3 input for a B cereus isolate
),
mainPanel(
plotOutput("hist")
)
)
)
df = read.csv("Iso402.csv")
df
# Filter the database for rows with the same species as the BTyper3 input
df$species <- trimws(df$species)
matching_species_df <- subset(database, species == df$species)
matching_species_df
# Simulate 1000 units of HTST milk along the supply chain
## Set up dataframe for modeling 1000 units of HTST milk
n_sim = 1000
ModelData = data.frame(unit_id = rep(seq(1,n_sim)))
## Set seed
set.seed(1)
# Stage 1: facility storage
## (a)  Sample the temperature distribution
ModelData$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
## (b) Sample the storage time (in days) distribution
ModelData$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 2: transport from facility to retail store
## (a)  Sample the temperature distribution
ModelData$T_T <- rep(rtri(n_sim,min=1.7,max=10.0,mode=4.4)) #triangular distribution
## (b) Sample the transportation time (in days) distribution
ModelData$t_T <- rep(rtri(n_sim,min=1,max=10,mode=5))
# Stage 3: storage/display at retail store
## (a)  Sample the temperature distribution
ModelData$T_S <- rep(rtruncnorm(n_sim,a=-1.4,b=5.4,mean=2.3,sd=1.8)) #truncated normal distribution
## (b) Sample the storage time (in days) distribution
ModelData$t_S <- rep(rtruncnorm(n_sim,a=0.042,b=10.0, mean=1.821,sd=3.3)) #truncated normal distribution
## Stage 4: transportation from retail store to home
## (a)  Sample the temperature distribution
ModelData$T_T2 <- rep(rtruncnorm(n_sim,a=0,b=10,mean=8.5,sd=1.0)) #truncated normal distribution
## (b) Sample the transportation time (in days) distribution
ModelData$t_T2 <- rep(rtruncnorm(n_sim,a=0.01,b=0.24, mean=0.04,sd=0.02)) #truncated normal distribution
## Stage 5: home storage
## (a)  Sample the temperature distribution
temps <- rep(NA, n_sim)
for (i in 1:n_sim){
number <- rlaplace(1,m=4.06,s=2.31)
while (number > 15 | number < -1) {
number <- rlaplace(1,m=4.06,s=2.31) #truncated laplace distribution
}
temps[i] <- number
}
ModelData$T_H <- temps
## (b) Define t_H as 35 days for all units
ModelData$t_H <- rep(input$d, each = n_sim)
## Model temperature profiles of 1000 units HTST milk
env_cond_time <- matrix(c(rep(0,1000),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
env_cond_temp <- matrix(c(data$T_F,
data$T_F,
data$T_T,
data$T_T,
data$T_S,
data$T_S,
data$T_T2,
data$T_T2,
data$T_H,
data$T_H), ncol = 10)
ModelData$t_H <- rep(35, each = n_sim)
## Model temperature profiles of 1000 units HTST milk
env_cond_time <- matrix(c(rep(0,1000),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
## (b) Sample the storage time (in days) distribution
ModelData$t_F <- rep(runif(n_sim,min=1,max=2)) #uniform distribution
# Stage 1: facility storage
## (a)  Sample the temperature distribution
ModelData$T_F <- rep(runif(n_sim,min=3.5,max=4.5)) #uniform distribution
ModelData
## Model temperature profiles of 1000 units HTST milk
env_cond_time <- matrix(c(rep(0,1000),
data$t_F,
data$t_F+0.001,
data$t_F + data$t_T,
data$t_F + data$t_T+0.001,
data$t_F + data$t_T + data$t_S,
data$t_F + data$t_T + data$t_S+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2,
data$t_F + data$t_T + data$t_S + data$t_T2+0.001,
data$t_F + data$t_T + data$t_S + data$t_T2 + data$t_H), ncol = 10)
## Model temperature profiles of 1000 units HTST milk
env_cond_time <- matrix(c(rep(0,1000),
ModelData$t_F,
ModelData$t_F+0.001,
ModelData$t_F + ModelData$t_T,
ModelData$t_F + ModelData$t_T+0.001,
ModelData$t_F + ModelData$t_T + ModelData$t_S,
ModelData$t_F + ModelData$t_T + ModelData$t_S+0.001,
ModelData$t_F + ModelData$t_T + ModelData$t_S + ModelData$t_T2,
ModelData$t_F + ModelData$t_T + ModelData$t_S + ModelData$t_T2+0.001,
ModelData$t_F + ModelData$t_T + ModelData$t_S + ModelData$t_T2 + ModelData$t_H), ncol = 10)
env_cond_temp <- matrix(c(ModelData$T_F,
ModelData$T_F,
ModelData$T_T,
ModelData$T_T,
ModelData$T_S,
ModelData$T_S,
ModelData$T_T2,
ModelData$T_T2,
ModelData$T_H,
ModelData$T_H), ncol = 10)
# Assign serving size to 1000 units of HTST milk
serving.size<-sample(x = c(rep(x = 244,50),rep(245,25),rep(488,20),rep(732,5)),size = 1000,replace = TRUE)
ModelData$serving.size = serving.size
## Randomly assign isolate names to 1000 units of HTST milk
## All isolates from the same species are equally represented
isolates <- matching_species_df$Isolate.Name
samples_per_isolate <- n_sim / length(isolates)
sampled_isolates <- character()
for (isolate in isolates) {
sampled_isolates <- c(sampled_isolates, rep(isolate, samples_per_isolate))
}
sampled_isolates <- sample(sampled_isolates)
ModelData$isolate <- sampled_isolates
## Generate simulation input
## Assign growth parameters to 1000 units of HTST milk
ModelData$index = match(ModelData$isolate, matching_species_df$Isolate.Name)
ModelData$Q0 = matching_species_df$Q0[ModelData$index]
ModelData$Nmax = matching_species_df$Nmax[ModelData$index]
ModelData$b = matching_species_df$b[ModelData$index]
ModelData$Tmin = matching_species_df$Tmin[ModelData$index]
ModelData$Clade = matching_species_df$Clade[ModelData$index]
## Generate N0 from a Poisson distribution
set.seed(42)
N0 = rpois(n = n_sim, lambda = 100)
ModelData$N0 = N0
ModelData$Topt = sapply(ModelData$Clade, xopt_func)
ModelData$mu_opt = (ModelData$b*(ModelData$Topt-ModelData$Tmin))^2
# Run simulation
for (i in 1:nrow(ModelData)){
my_primary <- list(mu_opt = ModelData$mu_opt[i], Nmax = ModelData$Nmax[i], N0 = ModelData$N0[i], Q0 = ModelData$Q0[i])
sec_temperature <- list(model = "reducedRatkowsky", xmin = ModelData$Tmin[i], b = ModelData$b[i], clade = ModelData$Clade[i])
my_secondary <- list(temperature = sec_temperature)
growth <- predict_dynamic_growth(times = env_cond_time[i,],
env_conditions = tibble(time = env_cond_time[i,],
temperature = env_cond_temp[i,]),
my_primary,
my_secondary)
sim <- growth$simulation
ModelData$conc[i] = tail(sim$logN, 1)
}
ModelData$realCFU = 10^ModelData$conc
ModelData$CFU_per_serve = ModelData$realCFU*ModelData$serving.size
log_CFU_per_serving <- log10(ModelData$CFU_per_serve)
ModelData
log_CFU_per_serving
runApp('BRisk.R')
runApp('BRisk.R')
runApp('BRisk.R')
sum(ModelData$conc>5)/1000
runApp('BRisk.R')
